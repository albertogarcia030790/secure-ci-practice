name: Secure CI / CD

on:
  pull_request:
    branches: ["main"]
  push:
    branches: ["main"]

permissions:
  contents: read
  packages: write
  id-token: write

env:
  IMAGE_NAME: ${{ github.repository_owner }}/secure-app

jobs:
  build-and-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Set up QEMU (for buildx)
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}

      - name: Build Docker image
        id: build-image
        run: |
          IMAGE_TAG=ghcr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_OUTPUT
          docker build -t $IMAGE_TAG .

      - name: Run SCA + image scan with Trivy
        run: |
          IMAGE_TAG=${{ steps.build-image.outputs.IMAGE_TAG }}
          trivy fs --exit-code 0 --format json --output trivy_fs.json .
          trivy image --format json --output trivy_image.json --exit-code 1 --severity CRITICAL $IMAGE_TAG || echo "TRIVY_CRITICAL=1" >> $GITHUB_OUTPUT

      - name: Run SAST with Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: 'p/ci'

      - name: Generate SBOM with Syft
        run: |
          IMAGE_TAG=${{ steps.build-image.outputs.IMAGE_TAG }}
          syft $IMAGE_TAG -o cyclonedx-json=sbom.cyclonedx.json

      - name: Upload SBOM as artifact
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.cyclonedx.json

      - name: Evaluate scan results and fail on policy
        run: |
          if grep -R "GPL-2.0" -n package* requirements* package.json package-lock.json 2>/dev/null; then
            echo "Disallowed license detected (GPL-2.0)" >&2
            exit 2
          fi
          echo "No blocking policy violations found."

  release:
    needs: build-and-scan
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Build and push Docker image
        id: release-image
        run: |
          IMAGE_TAG=ghcr.io/${{ env.IMAGE_NAME }}:latest
          docker build -t $IMAGE_TAG .
          docker push $IMAGE_TAG
          IMAGE_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' $IMAGE_TAG)
          echo "IMAGE_DIGEST=$IMAGE_DIGEST" >> $GITHUB_OUTPUT

      - name: Decode Cosign key
        run: |
          echo "${{ secrets.COSIGN_KEY_B64 }}" | base64 --decode > cosign.key

      - name: Install Cosign
        run: |
          COSIGN_VERSION="2.2.0"
          curl -LO "https://github.com/sigstore/cosign/releases/download/v${COSIGN_VERSION}/cosign-linux-amd64"
          chmod +x cosign-linux-amd64
          sudo mv cosign-linux-amd64 /usr/local/bin/cosign

      - name: Sign Docker image with Cosign
        run: |
          cosign sign --key cosign.key ${{ steps.release-image.outputs.IMAGE_DIGEST }}

      - name: Verify image signature
        run: |
          cosign verify --key cosign.key.pub ${{ steps.release-image.outputs.IMAGE_DIGEST }} || true
